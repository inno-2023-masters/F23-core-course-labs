version: "3.3"

networks:
  loki:

services:
  app-python:
    image: "ar7ch/devops-app-python:latest"
    networks:
      - loki
    expose:
      - "80"
    ports:
      - "8000:80"
    deploy: &app_resource_cap
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
    logging: &log_setup
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
        # log rotation options
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "/bin/healthcheck", "80"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

  app-go:
    image: "ar7ch/devops-app-go:latest"
    networks:
      - loki
    expose:
      - "80"
    ports:
      - "8001:80"
    deploy:
      <<: *app_resource_cap
    logging:
      <<: *log_setup
    healthcheck:
      test: ["CMD", "/bin/healthcheck", "80"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - loki
    deploy: &monitoring_res_cap
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      <<: *log_setup


  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=14d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'
      - '--storage.tsdb.max-block-duration=4h'
      - '--storage.tsdb.wal-segment-size=60MB'
      - '--storage.tsdb.allow-overlapping-blocks'
      - '--query.max-samples=5000000'
    restart: unless-stopped
    expose:
      - 9090
    ports:
      - "9090:9090"
    deploy:
      <<: *monitoring_res_cap
    networks:
      - loki

  loki:
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - loki
    deploy:
      <<: *monitoring_res_cap
    logging:
      <<: *log_setup

  promtail:
    image: grafana/promtail:2.9.2
    ports:
      - "9080:9080"
    expose:
      - "80"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers
      - ./docker-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - loki
    deploy:
      <<: *monitoring_res_cap
    logging:
      <<: *log_setup

volumes:
  prometheus-data: