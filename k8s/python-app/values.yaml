# Default values for python-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

containerPort: 5000

image:
  repository: xmtosx/moscow_time
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations:
  vault.hashicorp.com/role: "python-app"

podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  port: 80
  targetPort: 5000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.

autoscaling:
  enabled: false
  # minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: config
    configMap:
      name: config-entity

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: config-volume-py
    mountPath: "/config.json"
    subPath: config.json
  - name: counter-data-py
    mountPath: /data
  - name: init-data-py
    mountPath: /init_data

volumes:
  - name: config-volume-py
    configMap:
      name: config-map-entity-py
  - name: init-data-py
    emptyDir:
      sizeLimit: 10Mi

volumeClaimTemplates:
  - metadata:
      name: counter-data-py
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Mi

initContainers:
  - name: install
    image: busybox:1.28
    command:
      - wget
      - "-O"
      - "/work-dir/index.html"
      - http://info.cern.ch
    volumeMounts:
      - name: init-data-py
        mountPath: "/work-dir"
  - name: queue-zero
    image: busybox:1.28
    command:
      - "touch"
      - "/work-dir/file"
    volumeMounts:
      - name: init-data-py
        mountPath: "/work-dir"
  - name: queue-one
    image: busybox:1.28
    command:
      - "sh"
      - "-c"
      - "echo one >> /work-dir/file"
    volumeMounts:
      - name: init-data-py
        mountPath: "/work-dir"
  - name: queue-two
    image: busybox:1.28
    command:
      - "sh"
      - "-c"
      - "echo two >> /work-dir/file"
    volumeMounts:
      - name: init-data-py
        mountPath: "/work-dir"
  - name: queue-three
    image: busybox:1.28
    command:
      - "sh"
      - "-c"
      - "echo three >> /work-dir/file"
    volumeMounts:
      - name: init-data-py
        mountPath: "/work-dir"

nodeSelector: {}

tolerations: []

affinity: {}
